-- DROP TABLE provincia;

CREATE TABLE provincia
(
  id_provincia serial NOT NULL,
  detalle character varying,
  id_sssalud integer,
  id_provincia_afip character(3),
  cod_postal character varying(255),
  CONSTRAINT pk_prov PRIMARY KEY (id_provincia)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE provincia
  OWNER TO postgres;



-- DROP TABLE localidad;

CREATE TABLE localidad
(
  id_localidad serial NOT NULL,
  id_provincia integer,
  detalle character varying,
  id_provinciasss integer,
  id_localidadesss integer,
  cod_postal integer,
  CONSTRAINT pk_local PRIMARY KEY (id_localidad),
  CONSTRAINT fk2fa59049d0eb8511 FOREIGN KEY (id_provincia)
      REFERENCES provincia (id_provincia) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE localidad
  OWNER TO postgres;




CREATE TABLE public.tablaescalasalarialjornales
(
  id integer NOT NULL,
  antiguedaddesde integer NOT NULL,
  camara character varying(255),
  cata numeric(19,2),
  catb numeric(19,2),
  catc numeric(19,2),
  catd numeric(19,2),
  cate numeric(19,2),
  catf numeric(19,2),
  fechadesde timestamp without time zone,
  CONSTRAINT tablaescalasalarialjornales_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
) TABLESPACE pg_default;
ALTER TABLE public.tablaescalasalarialjornales
  OWNER TO postgres;


CREATE OR REPLACE VIEW public.v_camara
 AS
	select distinct camara codigo, camara descripcion
	from tablaescalasalarialjornales j
;

ALTER TABLE public.v_camara
    OWNER TO postgres;




CREATE OR REPLACE VIEW public.v_camara_categoria
 AS
	select *
	from (select distinct camara
		  from tablaescalasalarialjornales) a,
		(select 'A' categoria 
		UNION 
		 select 'B' categoria
		UNION 
		 select 'C' categoria
		UNION 
		 select 'D' categoria
		UNION 
		 select 'E' categoria
		) b
	where NOT (camara='FAIM' and categoria  = 'E')
	order by 1,2
;

ALTER TABLE public.v_camara_categoria
    OWNER TO postgres;


CREATE OR REPLACE VIEW public.v_escala_salarial
 AS
		select id, camara, 'A' categoria, antiguedaddesde antiguedad, fechadesde vigencia, cata basico
		from tablaescalasalarialjornales j
		where j.cata is not null
		union
		select id, camara, 'B', antiguedaddesde, fechadesde, catb
		from tablaescalasalarialjornales j
		where j.catb is not null
		union
		select id, camara, 'C', antiguedaddesde, fechadesde, catc
		from tablaescalasalarialjornales j
		where j.catc is not null
		union
		select id, camara, 'D', antiguedaddesde, fechadesde, catd
		from tablaescalasalarialjornales j
		where j.catd is not null
		union
		select id, camara, 'E', antiguedaddesde, fechadesde, cate
		from tablaescalasalarialjornales j
		where j.cate is not null
		union
		select id, camara, 'F', antiguedaddesde, fechadesde, catf
		from tablaescalasalarialjornales j
		where catf is not null
;

ALTER TABLE public.v_escala_salarial
    OWNER TO postgres;

/*
--Escala salarial Vigente:
	select * from v_escala_salarial e
	where  camara = 'FAIM'
	and    vigencia = (select max(vigencia) from v_escala_salarial x where e.camara = x.camara )
	order by categoria , antiguedad, vigencia
*/


-- Table: public.usuario

-- DROP TABLE IF EXISTS public.usuario;

CREATE TABLE IF NOT EXISTS public.usuario
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    descripcion character varying(100) COLLATE pg_catalog."default" NOT NULL,
    habilitado boolean NOT NULL,
    dfa_secreto character varying(64) COLLATE pg_catalog."default",
    dfa_habilitado boolean NOT NULL DEFAULT false,
    
    ultimo_login  timestamp without time zone,
    previo_login  timestamp without time zone,
    
    creado_en timestamp without time zone,
    baja_en timestamp without time zone,
    baja boolean NOT NULL,
    actu_en timestamp without time zone,
    creado_por integer,
    actu_por integer,
    baja_por integer,


    CONSTRAINT "PK_usuario" PRIMARY KEY (id),
    CONSTRAINT "UQ_descripcion" UNIQUE (descripcion)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.usuario
    OWNER to postgres;
	 
 


-- Table: public.usuario_persona

-- DROP TABLE IF EXISTS public.usuario_persona;

CREATE TABLE IF NOT EXISTS public.usuario_persona
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
	usuario_id integer NOT NULL,
    nombre  character varying(100) COLLATE pg_catalog."default" NOT NULL,
    apellido character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
	CONSTRAINT "PK_persona" PRIMARY KEY (id),
    CONSTRAINT "UQ_persona_email" UNIQUE (email),
    CONSTRAINT "UQ_persona_apellido_nombre" UNIQUE (apellido, nombre),
	CONSTRAINT "UQ_persona_usuario_id" UNIQUE (usuario_id),
	CONSTRAINT "FK_persona_usuario_id" FOREIGN KEY (usuario_id)
        REFERENCES public.usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.usuario_persona
    OWNER to postgres;
		



-- Table: public.usuario_clave

-- DROP TABLE IF EXISTS public.usuario_clave;

CREATE TABLE IF NOT EXISTS public.usuario_clave
(
    id integer NOT NULL,
    hash_algorithm character varying(255) COLLATE pg_catalog."default" NOT NULL,
    salt character varying(255) COLLATE pg_catalog."default" NOT NULL,
    clave character varying(255) COLLATE pg_catalog."default" NOT NULL,
	
    creado_en timestamp without time zone,
    baja_en timestamp without time zone,
    baja boolean NOT NULL,
    actu_en timestamp without time zone,
    creado_por integer,
    actu_por integer,
    baja_por integer,
	
    CONSTRAINT "PK_usuario_clave" PRIMARY KEY (id),
    CONSTRAINT "FK_usuario_clave_id" FOREIGN KEY (id)
        REFERENCES public.usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.usuario_clave
    OWNER to postgres;
	
	

-- Table: public.usuario_key

-- DROP TABLE IF EXISTS public.usuario_key;

CREATE TABLE IF NOT EXISTS public.usuario_key
(
    usuario_id integer NOT NULL,
    key character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_usuario_key PRIMARY KEY (usuario_id, key),
    CONSTRAINT "UQ_key" UNIQUE (key)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.usuario_key
    OWNER to postgres;
    



-- Table: public.rol

-- DROP TABLE IF EXISTS public.rol;

CREATE TABLE IF NOT EXISTS public.rol
(
    id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    descripcion character varying(255) COLLATE pg_catalog."default" NOT NULL,
    creado_en timestamp without time zone,
    baja_en timestamp without time zone,
    baja boolean NOT NULL,
    actu_en timestamp without time zone,
    creado_por integer,
    actu_por integer,
    baja_por integer,
    CONSTRAINT "PK_rol" PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.rol
    OWNER to postgres;
	
	
	

-- Table: public.usuario_rol

-- DROP TABLE IF EXISTS public.usuario_rol;

CREATE TABLE IF NOT EXISTS public.usuario_rol
(
    rol_id smallint NOT NULL,
    usuario_id integer NOT NULL,
    creado_en timestamp without time zone,
    baja_en timestamp without time zone,
    baja boolean NOT NULL,
    actu_en timestamp without time zone,
    creado_por integer,
    actu_por integer,
    baja_por integer,
    CONSTRAINT "PK_usuario_rol" PRIMARY KEY (rol_id, usuario_id),
    CONSTRAINT "FK_usuario_rol_rol_id" FOREIGN KEY (rol_id)
        REFERENCES public.rol (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "FK_usuario_rol_usuario_id" FOREIGN KEY (usuario_id)
        REFERENCES public.usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
) TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.usuario_rol
    OWNER to postgres;
	
	
-- Index: IDX_usuario_rol_fkrol

-- DROP INDEX IF EXISTS public."IDX_usuario_rol_fkrol";

CREATE INDEX IF NOT EXISTS "IDX_usuario_rol_fkrol"
    ON public.usuario_rol USING btree
    (rol_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: IDX_user_role_fkuser

-- DROP INDEX IF EXISTS public."IDX_user_role_fkuser";

CREATE INDEX IF NOT EXISTS "IDX_usuario_rol_fkusuario"
    ON public.usuario_rol USING btree
    (usuario_id ASC NULLS LAST)
    TABLESPACE pg_default;
    
    


-- Table: public.clave_reset_token

-- DROP TABLE IF EXISTS public.clave_reset_token;

CREATE TABLE IF NOT EXISTS public.clave_reset_token
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    token character varying(200) COLLATE pg_catalog."default" NOT NULL,
    usuario_id integer NOT NULL,
    habilitado boolean NOT NULL,
    baja_fecha timestamp without time zone NOT NULL,
    CONSTRAINT pk_clave_reset_token PRIMARY KEY (id),
    CONSTRAINT "UC_token_clave_reset_token" UNIQUE (token)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.clave_reset_token
    OWNER to postgres;



-- Table: public.funcionalidad

-- DROP TABLE IF EXISTS public.funcionalidad;

create table funcionalidad
(
	id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
	descripcion varchar(50) not null
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.funcionalidad
    OWNER to postgres;
	
	
-- Table: public.rol_funcionalidad

-- DROP TABLE IF EXISTS public.rol_funcionalidad;

CREATE TABLE IF NOT EXISTS public.rol_funcionalidad
(
	id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    rol varchar(255) NOT NULL,
    funcionalidad varchar(50) NOT NULL,
	activo boolean 
)
TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.rol_funcionalidad
    OWNER to postgres;
	

-- Table: public.empresa

-- ALTER TABLE usuario_empresa DROP CONSTRAINT "FK_usuario_empresa_usuario_id";
-- ALTER TABLE usuario_empresa DROP CONSTRAINT "FK_usuario_empresa_empresa_id" ;

-- ALTER TABLE empresa_domicilio DROP CONSTRAINT "FK_empresa_domicilio_empresa_id" ;
-- ALTER TABLE empresa_contacto DROP CONSTRAINT "FK_empresa_contacto_empresa_id" ;
-- DROP TABLE IF EXISTS public.empresa;
/*  ALTER TABLE usuario_empresa ADD
    CONSTRAINT "FK_usuario_empresa_empresa_id" FOREIGN KEY (empresa_id)
        REFERENCES public.empresa (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;
    ALTER TABLE usuario_empresa ADD
	CONSTRAINT "FK_usuario_empresa_usuario_id" FOREIGN KEY (usuario_id)
        REFERENCES public.usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;
		
	ALTER TABLE empresa_domicilio ADD	
		CONSTRAINT "FK_empresa_domicilio_empresa_id" FOREIGN KEY (empresa_id)
        REFERENCES public.empresa (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;
	
	ALTER TABLE empresa_contacto ADD
	CONSTRAINT "FK_empresa_contacto_empresa_id" FOREIGN KEY (empresa_id)
        REFERENCES public.empresa (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
*/

CREATE TABLE IF NOT EXISTS public.empresa_restringida
(id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
cuit character varying(11) COLLATE pg_catalog."default" NOT NULL,
observacion character varying(200) COLLATE pg_catalog."default" NOT NULL,
  CONSTRAINT pk_empresa_restringida PRIMARY KEY (id)
)
TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.empresa_restringida
    OWNER to postgres;

select * from empresa_restringida
              empresa_restringida
			  
CREATE TABLE IF NOT EXISTS public.empresa
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
	cuit character varying(11) COLLATE pg_catalog."default" NOT NULL,
	razon_social character varying(200) COLLATE pg_catalog."default" NOT NULL,
	ramo_id integer null,

    CONSTRAINT pk_empresa PRIMARY KEY (id)
)
TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.empresa
    OWNER to postgres;

ALTER TABLE public.empresa
ADD CONSTRAINT "UQ_cuit" UNIQUE (cuit);

CREATE TABLE IF NOT EXISTS public.ramo
(
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),	
	descripcion character varying(200) COLLATE pg_catalog."default" NOT NULL,
	CONSTRAINT pk_ramo PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.ramo
    OWNER to postgres;


ALTER TABLE empresa ADD
    CONSTRAINT "FK_empresa_ramo_id" FOREIGN KEY (ramo_id)
        REFERENCES public.ramo (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;
		


CREATE TABLE public.empresa_contacto
(
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
	empresa_id integer NOT NULL,
	empresa_domicilio_id integer NULL,
	tipo character varying(10) COLLATE pg_catalog."default" NOT NULL,	
	valor character varying(200) COLLATE pg_catalog."default" NOT NULL,
	
	CONSTRAINT pk_empresa_contacto PRIMARY KEY (id),
	CONSTRAINT "FK_empresa_contacto_empresa_id" FOREIGN KEY (empresa_id)
        REFERENCES public.empresa (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
	
) TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.empresa_contacto
    OWNER to postgres;


ALTER TABLE public.empresa_contacto
ADD prefijo character varying(10) COLLATE pg_catalog."default" NULL;

/*
ALTER TABLE empresa_domicilio 
RENAME COLUMN tipo_id TO tipo;

ALTER TABLE public.empresa_domicilio 
ALTER COLUMN tipo SET DATA TYPE character varying(15);
*/


CREATE TABLE IF NOT EXISTS public.empresa_domicilio
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
	empresa_id integer NOT NULL,
	tipo character varying(15) NOT NULL,
	provincia_id integer NOT NULL,
	localidad_id integer NOT NULL,
	calle character varying(200) COLLATE pg_catalog."default" NOT NULL,
	calle_nro character varying(50) COLLATE pg_catalog."default" NULL,
	piso character varying(50) COLLATE pg_catalog."default" NULL,
	depto character varying(50) COLLATE pg_catalog."default" NULL,
	oficina character varying(50) COLLATE pg_catalog."default" NULL,
	cp character varying(50) COLLATE pg_catalog."default" NULL,
	planta character varying(50) COLLATE pg_catalog."default" NULL,
	
    CONSTRAINT pk_empresa_domicilio PRIMARY KEY (id),
	CONSTRAINT "FK_empresa_domicilio_empresa_id" FOREIGN KEY (empresa_id)
        REFERENCES public.empresa (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
) TABLESPACE pg_default;	



ALTER TABLE empresa_contacto ADD
    CONSTRAINT "FK_empresa_contacto_empresa_domicilio_id" FOREIGN KEY (empresa_domicilio_id)
        REFERENCES public.empresa_domicilio (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


CREATE TABLE IF NOT EXISTS public.usuario_empresa
(
	empresa_id integer NOT NULL,
	usuario_id integer NOT NULL,

    CONSTRAINT pk_usuario_empresa PRIMARY KEY (usuario_id, empresa_id),
    CONSTRAINT "FK_usuario_empresa_empresa_id" FOREIGN KEY (empresa_id)
        REFERENCES public.empresa (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "FK_usuario_empresa_usuario_id" FOREIGN KEY (usuario_id)
        REFERENCES public.usuario (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
) TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.usuario_empresa
    OWNER to postgres;
	
	
	
	select * FROM usuario u
	select * from  usuario_empresa
-- View: public.v_empresa_usuario

-- DROP VIEW public.v_empresa_usuario;

CREATE OR REPLACE VIEW public.v_empresa_usuario
 AS
 SELECT u.id AS usuario_id,
    u.descripcion,
    u.habilitado,
    u.ultimo_login,
    ue.empresa_id,
        CASE
            WHEN u.dfa_secreto IS NOT NULL AND u.dfa_habilitado = true THEN true
            ELSE false
        END AS dfa_habilitado
   FROM usuario u
     JOIN usuario_empresa ue ON u.id = ue.empresa_id
UNION
 SELECT u.id AS user_id,
    u.descripcion,
    u.habilitado,
    u.ultimo_login,
    '-1'::integer AS empresa_id,
        CASE
            WHEN u.dfa_secreto IS NOT NULL THEN true
            ELSE false
        END AS dfa_habilitado
   FROM usuario u
  WHERE NOT (u.id IN ( SELECT ue.empresa_id
           FROM usuario_empresa ue));

ALTER TABLE public.v_empresa_usuario
    OWNER TO postgres;	
	
	
-- Table: public.feriado

-- DROP TABLE IF EXISTS public.feriado;

CREATE TABLE IF NOT EXISTS public.feriado
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    fecha timestamp without time zone NOT NULL,
	CONSTRAINT pk_feriado PRIMARY KEY (id)
) TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.feriado
    OWNER to postgres;
	
	
ALTER TABLE public.feriado
    ADD CONSTRAINT "UK_feriado_fecha" UNIQUE (fecha)	
	
	

la tabla empresa 
	
-- Table: public.publicacion

-- DROP TABLE IF EXISTS public.publicacion;

CREATE TABLE IF NOT EXISTS public.publicacion
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
	titulo character varying(150) NOT NULL,
	cuerpo character varying(500) NOT NULL,
	vigencia_desde timestamp without time zone NULL,
	vigencia_hasta timestamp without time zone NULL,
	CONSTRAINT pk_publicacion PRIMARY KEY (id)
) TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.publicacion
    OWNER to postgres;
	
	
-- PadronService: Tabla afiliado
 DROP TABLE afiliado
CREATE TABLE afiliado
(cuil_titular character varying(255) NOT NULL,  --(*) Es el CUIL ORIGINAL
 inte         integer NOT NULL, 				--(*) va con valor cero
 cuil 		  character varying(255), 			--(*) idem cuil_titular - repite
 apellido 	  character varying(255),  			--(*)
 nombre       character varying(255), 			--(*)
 alta_fecha   timestamp without time zone,		--(*)
 alta_usr     character varying(255), 			--(*)
 modi_fecha   timestamp without time zone,		--(*) idem alta
 modi_usr     character varying(255),			--(*) idem alta
 baja_fecha   timestamp without time zone,
 baja_usr     character varying(255),
 CONSTRAINT PK_afiliado PRIMARY KEY  (cuil_titular, inte)
)  TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.afiliado
    OWNER to postgres;

 /* COLUMNAS QUE NO SE USAN ...
 anterior_os
 aportante_titular
 civil_esta
 discapacitado
 docu_numero
 documento_tipo
 id_antima
 id_antima_baja_fecha
 id_ospim
 id_ospim_baja_fecha
 id_uoma
 id_uoma_baja_fecha
 ingre_fecha
 naci_fecha
 nacionalidad
 nro_afiliado
 observaciones
 parentesco
 pres_ssalud_fecha
 sexo
 vigen_fecha
 id_motivo_baja
 id_seccional
*/

/*  
	------------------------------------
	 Tabla motivo_baja
		=> emancipado, mayor 21 sin estudiar, mayor 25, etc
	 Tabla seccional
		=> villa elisa, OMINT, Santa Fe, GRAL ROca, Colon
	------------------------------------
 */

CREATE TABLE sugerenciadatosafiliado
(id integer NOT NULL,
 apellido character varying(255),
 nombre character varying(255),
 afiliado_cuil_titular character varying(255),
 afiliado_inter integer,
 empresa_cuit character varying(255),
 empresa_sucursal character varying(255),  --Siempre '000'
 CONSTRAINT PK_sugerenciadatosafiliado PRIMARY KEY (id),
 CONSTRAINT FK_sugerenciadatosafiliado_afiliados FOREIGN KEY (afiliado_cuil_titular, afiliado_inter)
 REFERENCES afiliado (cuil_titular, inte) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
 /*
 CONSTRAINT FK_sugerenciadatosafiliado_empresa FOREIGN KEY (afiliado_cuil_titular, afiliado_inte)
 REFERENCES afiliado (cuil_titular, inte) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
 */
)  TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.sugerenciadatosafiliado
    OWNER to postgres;
	
 -- *) Si cargo afiliado con datos errones , se graba en afiliados	
 -- *) Si borro CUIL con errores de DJ, el registro en afiliado QUEDA con los errores!!
 -- *) Si borro CUIL con errores de DJ, el registro en sugerenciadatosafiliado QUEDA !!

 Calculo de deuda de la empresa 
 	=> OSPIM => deuda viene de AFIP son millones de datos.-
 	=> UOMA Y ANTIMA paga en empleadores
 
 --> 
 pagos
 	uoma_aportes
 	antima_aportes
 	
 select * from ddjj
 
 alter TABLE ddjj  DROP COLUMN tot_art46; 
 ALTER TABLE ddjj DROP COLUMN tot_antima_cs; 
 
 ALTER TABLE ddjj DROP COLUMN tot_uoma_cs;
 
 ALTER TABLE ddjj DROP COLUMN tot_uoma_as;
 
 ALTER TABLE ddjj DROP COLUMN tot_cuota_usu;
 
 ---crear indice cuit+periodo
CREATE TABLE IF NOT EXISTS public.ddjj
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
	periodo timestamp without time zone NOT NULL,
	secuencia integer NULL, --0:ORI, >0: RECTIFICATIVA => se carga cuando se PRESENTA.-
	empresa_id integer NOT NULL,
	estado character varying(150) NOT NULL, --PE-PENDIENTE, PR-Ingresada/PRESENTADA, BP-Con Boleta de Pago, BA-Baja logica
	presentada_fecha timestamp without time zone,
	creado_en timestamp without time zone,	
	baja_en timestamp without time zone,
	baja boolean NOT NULL DEFAULT false,
	actu_en timestamp without time zone,
	creado_por integer,
	actu_por integer,
	baja_por integer,
	--cuit_empresa
	-- empresa_sucursal: siempre es 000 !!!! ??
	-- cantidad931  ??
	-- remuneracion931 ??
	CONSTRAINT PK_ddjj PRIMARY KEY (id)	
) TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.ddjj
    OWNER to postgres;


/*
CREATE INDEX IND_ddjj_empresa_periodo on ddjj
using btree
(empresa_id COLLATE pg_catalog."default", periodo )
*/
select * from ddjj_deta
drop table  ddjj_deta

alter table ddjj_deta
drop column egreso
select * from ddjj_deta




CREATE TABLE IF NOT EXISTS public.ddjj_deta
(
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
	ddjj_id integer NOT NULL,
	afiliado_cuil_titular character varying(255) NOT NULL,
	afiliado_inte integer NOT NULL,
	
	empresa_domicilio_id integer,  --planta_id
	camara character varying(255),
	categoria character varying(2),
	remunerativo numeric(19,2) ,
	no_remunerativo numeric(19,2) NULL,
	ingreso timestamp without time zone,
	egreso  timestamp without time zone,
	uoma_socio boolean NULL,
	antima_socio boolean NULL,

	CONSTRAINT PK_ddjj_deta PRIMARY KEY (id),
 	CONSTRAINT FK_ddjj_deta_ddjj FOREIGN KEY (ddjj_id)
 		REFERENCES ddjj (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)  TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.ddjj_deta
    OWNER to postgres;

CREATE TABLE IF NOT EXISTS public.ddjj_deta_aporte
(
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
	ddjj_deta_id integer NOT NULL,
	aporte character varying(20) NOT NULL,
	importe  numeric(19,2) NOT NULL,
	CONSTRAINT PK_ddjj_deta_aporte PRIMARY KEY (id)
) TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.ddjj_deta_aporte
    OWNER to postgres;

select * from aporte
select * from aporte_seteo

DROP TABLE aporte

CREATE TABLE IF NOT EXISTS public.aporte
(
    codigo character varying(20) COLLATE pg_catalog."default" NOT NULL,
	descripcion character varying(255) NOT NULL,
	entidad character varying(20) NOT NULL,
	orden integer NOT NULL,
	ddjj boolean  NOT NULL DEFAULT false,
	CONSTRAINT PK_aporte PRIMARY KEY (codigo)
)  TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.aporte
    OWNER to postgres;



DROP TABLE public.aporte_seteo

CREATE TABLE IF NOT EXISTS public.aporte_seteo
(id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
 aporte character varying(20) COLLATE pg_catalog."default" NOT NULL,
 desde timestamp without time zone,
 hasta timestamp without time zone,
 
 entidad character varying(20), --UOMA, ANTIMA, OSPIM
 socio   character (1), --SI/NO
 calculo_tipo   character varying(10) COLLATE pg_catalog."default" NOT NULL, --PO,EN
 calculo_valor   numeric(19,2) NOT NULL,
 calculo_base character varying(5), --RE-REMUNERACION, PJ-PARITARIA_JORNAL, PS-PARITARIA_SALARIO
 camara character varying(20), --FAIM, CAENA, CEPA
 camara_categoria character varying(2),
 camara_antiguedad numeric(3),
 
 CONSTRAINT PK_aporte_seteo PRIMARY KEY (id)
 )  TABLESPACE pg_default;
 
 
ALTER TABLE IF EXISTS public.aporte_seteo
    OWNER to postgres;
	
   
CREATE TABLE IF NOT EXISTS public.banco
(
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
	descripcion character varying(50),
	CONSTRAINT PK_banco PRIMARY KEY (id)
)	

CREATE TABLE IF NOT EXISTS public.banco_sucursal
(
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
	banco_id integer NOT NULL,
	codigo character varying(5),
	descripcion character varying(50),
	CONSTRAINT PK_banco_sucursal PRIMARY KEY (id)
)	

select * from banco_convenio

drop TABLE public.banco_convenio

CREATE TABLE IF NOT EXISTS public.banco_convenio
(
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
	sucursal_id integer NOT NULL,
	codigo character varying(10),
	cuenta character varying(10),
	CONSTRAINT PK_banco_convenio PRIMARY KEY (id)
)	

DROP TABLE public.banco_convenio_mov_tipo

CREATE TABLE IF NOT EXISTS public.banco_convenio_mov_tipo
(
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
	convenio_id integer NOT NULL,
	aporte character varying(20) NOT NULL UNIQUE,
	tipo character varying(5) NOT NULL,
	descripcion character varying(50) NOT NULL,
	CONSTRAINT PK_banco_convenio_mov_tipo PRIMARY KEY (id)
)	

select * from banco_convenio_mov_tipo
select * from aporte
select * from boleta_pago

DROP TABLE   public.boleta_pago
CREATE TABLE IF NOT EXISTS public.boleta_pago
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
	empresa_id integer NOT NULL,  --En ddjj repito id de la ddjj
    
	secuencia integer  NOT NULL, -- Nro Boleta por empresa. Hay 2 contadores: boletas sin DDJJ y otro con DDJJ.
	aporte  character varying(20)  NOT NULL, -- El aporte define la ENTIDAD: UOMA, ANTIMA, OSPIM
	importe numeric(19,2) NOT NULL, -- BoletaBlanca: importe que carga el usuario, en DDJJ: total del calculo de los cuiles q pagan el aporte
	intencion_pago timestamp without time zone NOT NULL,
	interes numeric(19,2) NULL,  -- Ajuste calculado por mora.-
	ddjj_id  integer,
	acta_nro character varying(20),
	descripcion character varying(50),  --sin descripcion las de ddjj
	forma_pago character varying(10),
	
	CONSTRAINT "FK_boleta_pago_empresa_id" FOREIGN KEY (empresa_id)
        REFERENCES public.empresa (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION 
);	
	
-- Table: public.ajuste

-- DROP TABLE IF EXISTS public.ajuste;

CREATE TABLE IF NOT EXISTS public.ajuste
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    empresa_id integer NOT NULL,
    periodo timestamp without time zone NOT NULL,
    aporte character varying(20) COLLATE pg_catalog."default" NOT NULL,
    importe numeric(19,2) NOT NULL,
    vigencia timestamp without time zone NOT NULL,
    boleta_pago_id integer,
    CONSTRAINT pk_ajuste PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.ajuste
    OWNER to postgres;


DROP TABLE IF EXISTS public.afip_interes;

CREATE TABLE IF NOT EXISTS public.afip_interes
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    desde timestamp without time zone NOT NULL,
    hasta timestamp without time zone NULL,
	indice numeric(19,2) NOT NULL, 
	 CONSTRAINT pk_afip_interes PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.afip_interes
    OWNER to postgres;
	



CREATE TABLE IF NOT EXISTS public.afip_vencimiento
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    vigencia timestamp without time zone NOT NULL,
	dia integer NOT NULL,
	 CONSTRAINT pk_afip_vencimiento PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.afip_vencimiento
    OWNER to postgres;




-- ===============================================================================================================
-- ===============================================================================================================

Script para SystemsCorp:

1) 
alter table boleta_pago add column forma_pago character varying(10);


2) 
DROP TABLE IF EXISTS public.afip_interes;

CREATE TABLE IF NOT EXISTS public.afip_interes
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    desde timestamp without time zone NOT NULL,
    hasta timestamp without time zone NULL,
	indice numeric(19,2) NOT NULL, 
	 CONSTRAINT pk_afip_interes PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.afip_interes
    OWNER to postgres;

3) Ejecutar los Inserts de afip_interes


4) nueva tabla funcionalidad
-- DROP TABLE IF EXISTS public.funcionalidad;

create table funcionalidad
(
	id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
	descripcion varchar(50) not null
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.funcionalidad
    OWNER to postgres;

5) 

-- Table: public.rol_funcionalidad

-- DROP TABLE IF EXISTS public.rol_funcionalidad;

CREATE TABLE IF NOT EXISTS public.rol_funcionalidad
(
	id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    rol varchar(255) NOT NULL,
    funcionalidad varchar(50) NOT NULL,
	activo boolean 
)
TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.rol_funcionalidad
    OWNER to postgres;

6)
select * from funcionalidad

INSERT INTO funcionalidad (id, descripcion)
VALUES
    (1, 'PUBLICACIONES')
	
INSERT INTO funcionalidad (id, descripcion)
VALUES (2, 'FERIADOS')

INSERT INTO funcionalidad (id, descripcion)
VALUES (3, 'DDJJ')

INSERT INTO funcionalidad (id, descripcion)
VALUES     (4, 'DDJJ_CONSULTA')

INSERT INTO funcionalidad (id, descripcion)
VALUES (5, 'BOLETAS')

INSERT INTO funcionalidad (id, descripcion)
VALUES (6, 'PAGOS')

INSERT INTO funcionalidad (id, descripcion)
VALUES     (7, 'DATOS_EMPRESA')

INSERT INTO funcionalidad (id, descripcion)
VALUES (8, 'BOLETA_BLANCA')

INSERT INTO funcionalidad (id, descripcion)
VALUES     (9, 'GESTION_ROLES')

INSERT INTO funcionalidad (id, descripcion)
VALUES     (10, 'CUITS_RESTRINGIDOS')

INSERT INTO funcionalidad (id, descripcion)
VALUES     (11, 'ROLES')

INSERT INTO funcionalidad (id, descripcion)
VALUES     (12, 'USUARIO_INTERNO')

INSERT INTO funcionalidad (id, descripcion)
VALUES     (13, 'INTERESES_AFIP')

INSERT INTO funcionalidad (id, descripcion)
VALUES     (14,'AJUSTES')


7)
insert into rol_funcionalidad (rol, funcionalidad, activo)
values
('EMPLEADOR','PUBLICACIONES',true),
('EMPLEADOR','FERIADOS',true),
('EMPLEADOR','DDJJ',true),
('EMPLEADOR','DDJJ_CONSULTA',true),
('EMPLEADOR','BOLETAS',true),
('EMPLEADOR','PAGOS',true),
('EMPLEADOR','DATOS_EMPRESA',true),
('EMPLEADOR','BOLETA_BLANCA',true),
('EMPLEADOR','GESTION_ROLES',true),
('EMPLEADOR','CUITS_RESTRINGIDOS',true),
('EMPLEADOR','ROLES',true),
('EMPLEADOR','USUARIO_INTERNO',true),
('EMPLEADOR','INTERESES_AFIP',true),
('EMPLEADOR', 'AJUSTES',true),

('ADMINISTRATIVO','FERIADOS',true),
('ADMINISTRATIVO','DDJJ',true),
('ADMINISTRATIVO','DDJJ_CONSULTA',true),
('ADMINISTRATIVO','BOLETAS',true),
('ADMINISTRATIVO','PAGOS',true),
('ADMINISTRATIVO','DATOS_EMPRESA',true),
('ADMINISTRATIVO','BOLETA_BLANCA',true),
('ADMINISTRATIVO','GESTION_ROLES',true),
('ADMINISTRATIVO','CUITS_RESTRINGIDOS',true),
('ADMINISTRATIVO','ROLES',true),
('ADMINISTRATIVO','USUARIO_INTERNO',true),
('ADMINISTRATIVO','INTERESES_AFIP',true),
('ADMINISTRATIVO', 'AJUSTES',true),

('ROOT -1','FERIADOS',true),
('ROOT -1','DDJJ',true),
('ROOT -1','DDJJ_CONSULTA',true),
('ROOT -1','BOLETAS',true),
('ROOT -1','PAGOS',true),
('ROOT -1','DATOS_EMPRESA',true),
('ROOT -1','BOLETA_BLANCA',true),
('ROOT -1','GESTION_ROLES',true),
('ROOT -1','CUITS_RESTRINGIDOS',true),
('ROOT -1','ROLES',true),
('ROOT -1','USUARIO_INTERNO',true),
('ROOT -1','INTERESES_AFIP',true),
('ROOT -1', 'AJUSTES',true),

('ADMINISTRADOR','FERIADOS',true),
('ADMINISTRADOR','DDJJ',true),
('ADMINISTRADOR','DDJJ_CONSULTA',true),
('ADMINISTRADOR','BOLETAS',true),
('ADMINISTRADOR','PAGOS',true),
('ADMINISTRADOR','DATOS_EMPRESA',true),
('ADMINISTRADOR','BOLETA_BLANCA',true),
('ADMINISTRADOR','GESTION_ROLES',true),
('ADMINISTRADOR','CUITS_RESTRINGIDOS',true),
('ADMINISTRADOR','ROLES',true),
('ADMINISTRADOR','USUARIO_INTERNO',true),
('ADMINISTRADOR','INTERESES_AFIP',true),
('ADMINISTRADOR', 'AJUSTES',true),

('OSPIM_EMPLEADO','FERIADOS',true),
('OSPIM_EMPLEADO','DDJJ',true),
('OSPIM_EMPLEADO','DDJJ_CONSULTA',true),
('OSPIM_EMPLEADO','BOLETAS',true),
('OSPIM_EMPLEADO','PAGOS',true),
('OSPIM_EMPLEADO','DATOS_EMPRESA',true),
('OSPIM_EMPLEADO','BOLETA_BLANCA',true),
('OSPIM_EMPLEADO','GESTION_ROLES',true),
('OSPIM_EMPLEADO','CUITS_RESTRINGIDOS',true),
('OSPIM_EMPLEADO','ROLES',true),
('OSPIM_EMPLEADO','USUARIO_INTERNO',true),
('OSPIM_EMPLEADO','INTERESES_AFIP',true),
('OSPIM_EMPLEADO', 'AJUSTES',true),

('AUTENTICACION_PARCIAL','FERIADOS',true),
('AUTENTICACION_PARCIAL','DDJJ',true),
('AUTENTICACION_PARCIAL','DDJJ_CONSULTA',true),
('AUTENTICACION_PARCIAL','BOLETAS',true),
('AUTENTICACION_PARCIAL','PAGOS',true),
('AUTENTICACION_PARCIAL','DATOS_EMPRESA',true),
('AUTENTICACION_PARCIAL','BOLETA_BLANCA',true),
('AUTENTICACION_PARCIAL','GESTION_ROLES',true),
('AUTENTICACION_PARCIAL','CUITS_RESTRINGIDOS',true),
('AUTENTICACION_PARCIAL','ROLES',true),
('AUTENTICACION_PARCIAL','USUARIO_INTERNO',true),
('AUTENTICACION_PARCIAL','INTERESES_AFIP',true),
('AUTENTICACION_PARCIAL', 'AJUSTES',true),

('PRUEBA','FERIADOS',true),
('PRUEBA','DDJJ',true),
('PRUEBA','DDJJ_CONSULTA',true),
('PRUEBA','BOLETAS',true),
('PRUEBA','PAGOS',true),
('PRUEBA','DATOS_EMPRESA',true),
('PRUEBA','BOLETA_BLANCA',true),
('PRUEBA','GESTION_ROLES',true),
('PRUEBA','CUITS_RESTRINGIDOS',true),
('PRUEBA','ROLES',true),
('PRUEBA','USUARIO_INTERNO',true),
('PRUEBA','INTERESES_AFIP',true),
('PRUEBA', 'AJUSTES',true),

('ROL 4','FERIADOS',true),
('ROL 4','DDJJ',true),
('ROL 4','DDJJ_CONSULTA',true),
('ROL 4','BOLETAS',true),
('ROL 4','PAGOS',true),
('ROL 4','DATOS_EMPRESA',true),
('ROL 4','BOLETA_BLANCA',true),
('ROL 4','GESTION_ROLES',true),
('ROL 4','CUITS_RESTRINGIDOS',true),
('ROL 4','ROLES',true),
('ROL 4','USUARIO_INTERNO',true),
('ROL 4','INTERESES_AFIP',true),
('ROL 4', 'AJUSTES',true);

==================================================================================================================================================================
==================================================================================================================================================================

1) Creo la tabla de boleta_ajuste para imputar ajustes parcialmente


-- Table: public.ajuste

-- DROP TABLE IF EXISTS public.ajuste;

CREATE TABLE IF NOT EXISTS public.boleta_pago_ajuste
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    boleta_pago_id integer NOT NULL,
	ajuste_id  integer NOT NULL,
	importe numeric(19,2) NOT NULL,
    CONSTRAINT pk_boleta_pago_ajuste PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.boleta_pago_ajuste
    OWNER to postgres;


2) Saco relacion "boleta_pago - ajuste" de tabla ajuste

alter TABLE public.ajuste
drop column boleta_pago_id;

/* OJO QUE NO EXISTIA "AJUSTE" EN MI LOCAL...
	select * from ajuste

	CREATE TABLE IF NOT EXISTS public.ajuste
	(
		id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
		empresa_id integer NOT NULL,
		periodo timestamp without time zone NOT NULL,
		aporte character varying(20) COLLATE pg_catalog."default" NOT NULL,
		importe numeric(19,2) NOT NULL,
		vigencia timestamp without time zone NOT NULL,
		CONSTRAINT pk_ajuste PRIMARY KEY (id)
	) 
	TABLESPACE pg_default;


	ALTER TABLE IF EXISTS public.boleta_pago_ajuste
		OWNER to postgres;

*/

3) Ajusto valores en tabla de seteos


		select * from aporte_seteo s where aporte = 'ART46' order by desde


		update aporte_seteo 
		set    hasta = '1989-12-31'
		where aporte = 'ART46'
		and id = 2



		update aporte_seteo 
		set    calculo_valor= 0.75
		where  id = 3
		
		
select cata, catb, catc, catd, cate, catf 
from tablaescalasalarialjornales
where camara = 'FAIM'
and   antiguedaddesde = 0
and   fechadesde <  '2024-01-01'
order by fechadesde desc

0
'D'


select * from v_escala_salarial




==================================================================================================================================================================
==================================================================================================================================================================

1) cambiar tipo de dato a booleano

		ALTER TABLE aporte_seteo RENAME TO aporte_seteo_old;
		ALTER TABLE aporte_seteo_old DROP CONSTRAINT pk_aporte_seteo;

		CREATE TABLE IF NOT EXISTS public.aporte_seteo
		(
			id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
			aporte character varying(20) COLLATE pg_catalog."default" NOT NULL,
			desde timestamp without time zone,
			hasta timestamp without time zone,
			entidad character varying(20) COLLATE pg_catalog."default",
			socio boolean ,
			calculo_tipo character varying(10) COLLATE pg_catalog."default" NOT NULL,
			calculo_valor numeric(19,2) NOT NULL,
			calculo_base character varying(5) COLLATE pg_catalog."default",
			camara character varying(20) COLLATE pg_catalog."default",
			camara_categoria character varying(2) COLLATE pg_catalog."default",
			camara_antiguedad numeric(3,0),
			CONSTRAINT pk_aporte_seteo PRIMARY KEY (id)
		)

		TABLESPACE pg_default;

		ALTER TABLE IF EXISTS public.aporte_seteo
			OWNER to postgres;

		insert into	aporte_seteo
		select id, aporte, desde, hasta, entidad, 
					CASE WHEN socio='S' THEN true WHEN 
					socio='N' THEN false ELSE null END as socio,
			   calculo_tipo, calculo_valor, calculo_base, 
			   camara, camara_categoria, camara_antiguedad
		from   aporte_seteo_old 


		select * from aporte_seteo

==================================================================================================================================================================
==================================================================================================================================================================

1) Agrego atributo Notifiaciones a la tabla de usuarios

alter table usuario_persona
add column mail_empre_alta boolean NOT NULL DEFAULT false;




==================================================================================================================================================================
==================================================================================================================================================================
-- 24/05/2024 

alter table empresa
drop column ramo_id 

alter table boleta_pago
add column vencimiento timestamp without time zone NULL

--alter table boleta_pago ALTER COLUMN vencimiento DROP NOT NULL;



==================================================================================================================================================================
==================================================================================================================================================================
-- 30/05/2024


-- View: public.v_escala_salarial

-- DROP VIEW public.v_escala_salarial;

CREATE OR REPLACE VIEW public.v_escala_salarial
 AS
 SELECT j.id, 'PJ'::text AS tipo,
    j.camara,
    'A'::text AS categoria,
    j.antiguedaddesde AS antiguedad,
    j.fechadesde AS vigencia,
    j.cata AS basico
   FROM tablaescalasalarialjornales j
  WHERE j.cata IS NOT NULL
UNION
 SELECT s.id, 'PS'::text AS tipo,
    s.camara,
    'A'::text AS categoria,
    s.antiguedaddesde AS antiguedad,
    s.fechadesde AS vigencia,
    s.cata AS basico
   FROM tablaescalasalarialsueldos s
  WHERE s.cata IS NOT NULL
UNION
 SELECT j.id, 'PJ'::text AS tipo,
    j.camara,
    'B'::text AS categoria,
    j.antiguedaddesde AS antiguedad,
    j.fechadesde AS vigencia,
    j.catb AS basico
   FROM tablaescalasalarialjornales j
  WHERE j.catb IS NOT NULL
UNION
 SELECT s.id, 'PS'::text AS tipo,
    s.camara,
    'B'::text AS categoria,
    s.antiguedaddesde AS antiguedad,
    s.fechadesde AS vigencia,
    s.catb AS basico
   FROM tablaescalasalarialsueldos s
  WHERE s.catb IS NOT NULL
UNION
 SELECT j.id, 'PJ'::text AS tipo,
    j.camara,
    'C'::text AS categoria,
    j.antiguedaddesde AS antiguedad,
    j.fechadesde AS vigencia,
    j.catc AS basico
   FROM tablaescalasalarialjornales j
  WHERE j.catc IS NOT NULL
UNION
 SELECT s.id, 'PS'::text AS tipo,
    s.camara,
    'C'::text AS categoria,
    s.antiguedaddesde AS antiguedad,
    s.fechadesde AS vigencia,
    s.catc AS basico
   FROM tablaescalasalarialsueldos s
  WHERE s.catc IS NOT NULL
UNION
 SELECT j.id, 'PJ'::text AS tipo,
    j.camara,
    'D'::text AS categoria,
    j.antiguedaddesde AS antiguedad,
    j.fechadesde AS vigencia,
    j.catd AS basico
   FROM tablaescalasalarialjornales j
  WHERE j.catd IS NOT NULL
UNION
 SELECT s.id, 'PS'::text AS tipo,
    s.camara,
    'D'::text AS categoria,
    s.antiguedaddesde AS antiguedad,
    s.fechadesde AS vigencia,
    s.catd AS basico
   FROM tablaescalasalarialsueldos s
  WHERE s.catd IS NOT NULL
UNION
 SELECT j.id, 'PJ'::text AS tipo,
    j.camara,
    'E'::text AS categoria,
    j.antiguedaddesde AS antiguedad,
    j.fechadesde AS vigencia,
    j.cate AS basico
   FROM tablaescalasalarialjornales j
  WHERE j.cate IS NOT NULL
UNION
 SELECT s.id, 'PS'::text AS tipo,
    s.camara,
    'E'::text AS categoria,
    s.antiguedaddesde AS antiguedad,
    s.fechadesde AS vigencia,
    s.cate AS basico
   FROM tablaescalasalarialsueldos s
  WHERE s.cate IS NOT NULL
UNION
 SELECT j.id, 'PJ'::text AS tipo,
    j.camara,
    'F'::text AS categoria,
    j.antiguedaddesde AS antiguedad,
    j.fechadesde AS vigencia,
    j.catf AS basico
   FROM tablaescalasalarialjornales j
  WHERE j.catf IS NOT NULL
UNION
 SELECT s.id, 'PS'::text AS tipo,
    s.camara,
    'F'::text AS categoria,
    s.antiguedaddesde AS antiguedad,
    s.fechadesde AS vigencia,
    s.catf AS basico
   FROM tablaescalasalarialsueldos s
  WHERE s.catf IS NOT NULL
;

ALTER TABLE public.v_escala_salarial
    OWNER TO postgres;

==================================================================================================================================================================
==================================================================================================================================================================
-- 04/06

-- Table: public.aporte_vencimiento

-- DROP TABLE IF EXISTS public.aporte_vencimiento;

CREATE TABLE IF NOT EXISTS public.aporte_vencimiento
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    aporte_codigo character varying(20),
	desde timestamp without time zone NOT NULL,
	hasta timestamp without time zone ,
    dia integer NOT NULL,
    CONSTRAINT pk_aporte_vencimiento PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.aporte_vencimiento
    OWNER to postgres;

select * from boleta_pago

ALTER TABLE boleta_pago
ADD CONSTRAINT UK_boleta_pago_aporte_ddjj UNIQUE (aporte, ddjj_id);

ALTER TABLE boleta_pago
ADD COLUMN bep character varying(255);

==================================================================================================================================================================
==================================================================================================================================================================

-- PROXIMO.... 

select * from ajuste


ALTER TABLE ajuste
ADD COLUMN motivo character varying(10);


ALTER TABLE empresa
ADD COLUMN actividad_molinera boolean NOT NULL DEFAULT true;



==================================================================================================================================================================
==================================================================================================================================================================

-- PROXIMO.... 

update ddjj set periodo = (periodo::date || ' 00:00:00')::timestamp
update boleta_pago set forma_pago = 'VENTANILLA' where ddjj_id is null
 
update afiliado
set apellido = upper(apellido), nombre = upper(nombre)


==================================================================================================================================================================
==================================================================================================================================================================
-- PROXIMO.... 


CREATE TABLE IF NOT EXISTS public.afiliado_actu
(
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    cuil_titular character varying(255) COLLATE pg_catalog."default" NOT NULL,
    apellido character varying(255) COLLATE pg_catalog."default" NOT NULL,
    nombre character varying(255) COLLATE pg_catalog."default" NOT NULL,
	empresa_id integer NOT NULL,
	creado_en timestamp without time zone DEFAULT now(),
	creado_por integer,
	CONSTRAINT "PK_afiliado_actu" PRIMARY KEY (id)
) TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.afiliado_actu
    OWNER to postgres;

-- alter table afiliado_actu alter column creado_en set default now();



==================================================================================================================================================================
==================================================================================================================================================================
-- PROXIMO.... 

ALTER TABLE public.aporte_seteo
ADD CONSTRAINT fk_aporte_seteo_aporte
FOREIGN KEY (aporte) REFERENCES public.aporte (codigo);

ALTER TABLE aporte_vencimiento
RENAME COLUMN aporte_codigo TO aporte;

ALTER TABLE public.aporte_vencimiento
ADD CONSTRAINT fk_aporte_vencimiento_aporte
FOREIGN KEY (aporte) REFERENCES public.aporte (codigo);

ALTER TABLE public.banco_sucursal
ADD CONSTRAINT fk_banco_sucursal_banco
FOREIGN KEY (banco_id) REFERENCES public.banco (id);

ALTER TABLE public.banco_convenio
ADD CONSTRAINT fk_banco_convenio_banco_sucursal
FOREIGN KEY (sucursal_id) REFERENCES public.banco_sucursal (id);

ALTER TABLE public.banco_convenio_mov_tipo
ADD CONSTRAINT fk_banco_convenio_mov_tipo_banco_convenio
FOREIGN KEY (convenio_id) REFERENCES public.banco_convenio (id);

ALTER TABLE public.banco_convenio_mov_tipo
ADD CONSTRAINT fk_banco_convenio_mov_tipo_aporte
FOREIGN KEY (aporte) REFERENCES public.aporte (codigo);


ALTER TABLE public.boleta_pago
ADD CONSTRAINT fk_boleta_pago_empresa
FOREIGN KEY (empresa_id) REFERENCES public.empresa (id);


ALTER TABLE public.boleta_pago
ADD CONSTRAINT fk_boleta_pago_aporte
FOREIGN KEY (aporte) REFERENCES public.aporte (codigo);

ALTER TABLE public.boleta_pago
ADD CONSTRAINT fk_boleta_pago_ddjj
FOREIGN KEY (ddjj_id) REFERENCES public.ddjj (id);

ALTER TABLE public.boleta_pago
ADD CONSTRAINT pk_boleta_pago PRIMARY KEY (id);

ALTER TABLE public.boleta_pago_ajuste
ADD CONSTRAINT fk_boleta_pago_ajuste_boleta_pago
FOREIGN KEY (boleta_pago_id) REFERENCES public.boleta_pago (id);

ALTER TABLE public.boleta_pago_ajuste
ADD CONSTRAINT fk_boleta_pago_ajuste_ajuste
FOREIGN KEY (ajuste_id) REFERENCES public.ajuste (id);

ALTER TABLE public.ddjj
ADD CONSTRAINT fk_ddjj_empresa
FOREIGN KEY (empresa_id) REFERENCES public.empresa (id);


ALTER TABLE public.ddjj_deta
ADD CONSTRAINT fk_ddjj_deta_afiliado
FOREIGN KEY (afiliado_cuil_titular,afiliado_inte ) REFERENCES public.afiliado (cuil_titular, inte);


ALTER TABLE public.ddjj_deta
ADD CONSTRAINT fk_ddjj_deta_empresa_domicilio
FOREIGN KEY (empresa_domicilio_id) REFERENCES public.empresa_domicilio (id);

/*
select * from ddjj_deta_aporte a
where not exists ( select 1 from ddjj_deta x where a.ddjj_deta_id = x.id)

delete from ddjj_deta_aporte a
where not exists ( select 1 from ddjj_deta x where a.ddjj_deta_id = x.id)

*/
ALTER TABLE public.ddjj_deta_aporte
ADD CONSTRAINT fk_ddjj_deta_aporte_ddjj_deta
FOREIGN KEY (ddjj_deta_id) REFERENCES public.ddjj_deta (id);

ALTER TABLE public.ddjj_deta_aporte
ADD CONSTRAINT fk_ddjj_deta_aporte_aporte
FOREIGN KEY (aporte) REFERENCES public.aporte (codigo);

ALTER TABLE public.funcionalidad
ADD CONSTRAINT PK_funcionalidad PRIMARY KEY (id);


ALTER TABLE public.rol_funcionalidad
ADD CONSTRAINT PK_rol_funcionalidad PRIMARY KEY (id);

==================================================================================================================================================================
==================================================================================================================================================================
-- PROXIMO.... 

alter table boleta_pago
add column impresion timestamp without time zone;

alter table boleta_pago
add column  baja_en timestamp without time zone;


alter table boleta_pago	
DROP CONSTRAINT uk_boleta_pago_aporte_ddjj;

---------------------------------------------------------
ALTER TABLE public.empresa_contacto

select * from boleta_pago

    CONSTRAINT fk_ddjj_deta_ddjj FOREIGN KEY (ddjj_id)
        REFERENCES public.ddjj (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
		
		
---------------------------------------------------------

CREATE UNIQUE INDEX CONCURRENTLY UK_rol_funcionalidad_rf
ON rol_funcionalidad (rol, funcionalidad);		
 
 
 
---------------------------------------------------------
 
ALTER TABLE public.usuario_persona
DROP CONSTRAINT "UQ_persona_email";
 
 

CREATE TABLE uoma_aportes
(
  ente numeric,
  suc_nacion numeric,
  suc_bcra numeric,
  fecha_recauda date,
  fecha_rendicion date,
  cod_movimiento character varying,
  nro_movimiento numeric,
  importe numeric(13,2),
  moneda character varying,
  cod_barras character varying,
  banco_cheque numeric,
  sucursal_cheque numeric,
  nro_cheque numeric,
  estado_cheque character varying,
  cuit character varying,
  periodo_cod_barras date,
  nro_dec_portal_emple integer,
  nro_boleta_portal_emple integer,
  tipo_boleta integer,
  fecha_proceso date,
  nro_dec_portal_emple_max integer,
  nro_boleta_portal_emple_max integer
)
WITH (
  OIDS=FALSE
);
ALTER TABLE uoma_aportes
  OWNER TO postgres;


 
CREATE TABLE amtima_aportes
(
  ente numeric,
  suc_nacion numeric,
  suc_bcra numeric,
  fecha_recauda date NOT NULL,
  fecha_rendicion date,
  cod_movimiento character varying,
  nro_movimiento numeric NOT NULL,
  importe numeric(13,2),
  moneda character varying,
  cod_barras character varying,
  banco_cheque numeric,
  sucursal_cheque numeric,
  nro_cheque numeric,
  estado_cheque character varying NOT NULL,
  cuit character varying,
  periodo_cod_barras date NOT NULL,
  nro_dec_portal_emple integer,
  nro_boleta_portal_emple integer,
  tipo_boleta integer NOT NULL,
  fecha_proceso date,
  CONSTRAINT pk_amtima_aportes PRIMARY KEY (fecha_recauda, nro_movimiento, estado_cheque, tipo_boleta, periodo_cod_barras)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE amtima_aportes
  OWNER TO postgres;



------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
--						20240129 - junto las nuevas estructuras de la migracion
------------------------------------------------------------------------------------------------------------------


-- Empleadores arranco con una estructura resumida de afiliados, ahora dejo la que tienen en produccion.
drop table sugerenciadatosafiliado

ALTER TABLE ddjj_deta
DROP CONSTRAINT fk_ddjj_deta_afiliado ;

drop table afiliado
 
CREATE TABLE IF NOT EXISTS public.afiliado
(
    cuil_titular character varying(255) COLLATE pg_catalog."default" NOT NULL,
    inte integer NOT NULL,
    alta_fecha timestamp without time zone,
    alta_usr character varying(255) COLLATE pg_catalog."default",
    anterior_os bigint,
    apellido character varying(255) COLLATE pg_catalog."default",
    aportante_titular bigint,
    baja_fecha timestamp without time zone,
    baja_usr character varying(255) COLLATE pg_catalog."default",
    civil_esta character varying(255) COLLATE pg_catalog."default",
    cuil character varying(255) COLLATE pg_catalog."default",
    discapacitado character varying(255) COLLATE pg_catalog."default",
    docu_numero character varying(255) COLLATE pg_catalog."default",
    documento_tipo character varying(255) COLLATE pg_catalog."default",
    id_amtima bigint,
    id_amtima_baja_fecha timestamp without time zone,
    id_ospim bigint,
    id_ospim_baja_fecha timestamp without time zone,
    id_uoma bigint,
    id_uoma_baja_fecha timestamp without time zone,
    ingre_fecha timestamp without time zone,
    modi_fecha timestamp without time zone,
    modi_usr character varying(255) COLLATE pg_catalog."default",
    naci_fecha timestamp without time zone,
    nacionalidad bigint,
    nombre character varying(255) COLLATE pg_catalog."default",
    nro_afiliado bigint,
    observaciones character varying(500) COLLATE pg_catalog."default",
    parentesco character varying(255) COLLATE pg_catalog."default",
    pres_ssalud_fecha timestamp without time zone,
    sexo character varying(255) COLLATE pg_catalog."default",
    vigen_fecha timestamp without time zone,
    id_motivo_baja bigint,
    id_seccional bigint,
    CONSTRAINT afiliado_pkey PRIMARY KEY (cuil_titular, inte)
)

ALTER TABLE IF EXISTS public.afiliado
    OWNER to postgres;
	

CREATE TABLE IF NOT EXISTS public.sugerenciadatosafiliado
(
    id integer NOT NULL,
    apellido character varying(255) COLLATE pg_catalog."default",
    nombre character varying(255) COLLATE pg_catalog."default",
    afiliado_cuil_titular character varying(255) COLLATE pg_catalog."default",
    afiliado_inter integer,
    empresa_cuit character varying(255) COLLATE pg_catalog."default",
    empresa_sucursal character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT pk_sugerenciadatosafiliado PRIMARY KEY (id),
    CONSTRAINT fk_sugerenciadatosafiliado_afiliados FOREIGN KEY (afiliado_inter, afiliado_cuil_titular)
        REFERENCES public.afiliado (inte, cuil_titular) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.sugerenciadatosafiliado
    OWNER to postgres;
	
	
ALTER TABLE ddjj_deta
ADD CONSTRAINT fk_ddjj_deta_afiliado FOREIGN KEY (afiliado_cuil_titular, afiliado_inte)
        REFERENCES public.afiliado (cuil_titular, inte)
 




alter table boleta_pago
add column creado_en timestamp without time zone;


--Boleta de Pago que genero el ajuste tipo IPF
	alter table ajuste
	add column boleta_pago_id integer;


--esta columna no se usa mas. hay que borrarla luego
alter table empresa_domicilio
ADD COLUMN sucursal character varying(255) 



--Indices de optimizacion de Querys
	-- CREARLOS DESPUES DE INSERTAR DATOS !!!!


	DROP  INDEX idx_ddjj_empresaId;	
	
	CREATE INDEX idx_ddjj_empresaId
	ON ddjj (empresa_id);	




	DROP  INDEX idx_boleta_pago_empresaId;	
	
	CREATE INDEX idx_boleta_pago_empresaId
	ON boleta_pago (empresa_id);	




	DROP  INDEX idx_ddjj_deta_ddjjId;	
	
	CREATE INDEX idx_ddjj_deta_ddjjId
	ON ddjj_deta (ddjj_id);	



	DROP  INDEX idx_ddjj_periodo;	
	
	CREATE INDEX idx_ddjj_periodo
	ON ddjj (periodo);	


	CREATE INDEX idx_boleta_pago_ajuste_boleta_pago_id
	ON boleta_pago_ajuste (boleta_pago_id);
	
	
	CREATE INDEX idx_uoma_aportes_cuit_nro_boleta
	ON uoma_aportes (cuit, nro_boleta_portal_emple);

	CREATE INDEX idx_amtima_aportes_cuit_nro_boleta
	ON amtima_aportes (cuit, nro_boleta_portal_emple);


 

CREATE TABLE IF NOT EXISTS public.deuda_nomina_mov
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    cuit character varying(11) COLLATE pg_catalog."default" NOT NULL,
    periodo timestamp without time zone NOT NULL,
    movimiento character varying(10) COLLATE pg_catalog."default" NOT NULL,
    fecha timestamp without time zone
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.deuda_nomina_mov
    OWNER to postgres;
	
	
	
	
select * from ddjj
select * from empresa_domicilio



EXPLAIN
select *
from (select * from ddjj d where d.periodo >= '2022-05-01' and  d.periodo <= '2024-12-01') d
inner join boleta_pago b on d.id = b.ddjj_id 
			 inner join aporte a on a.codigo = b.aporte 
			 inner join empresa e on e.id = b.empresa_id
			 
			 

